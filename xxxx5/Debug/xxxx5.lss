
xxxx5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f7  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028a  00000000  00000000  00001037  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  88:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
		
	}
}

void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Selecciona ADC6 como entrada analógica (MUX2:0 = 0b110)
	ADMUX |= (1 << MUX2) | (1 << MUX1);
  96:	80 81       	ld	r24, Z
  98:	86 60       	ori	r24, 0x06	; 6
  9a:	80 83       	st	Z, r24
	// Configura referencia de voltaje AVCC con capacitor en AREF
	ADMUX |= (1 << REFS0);
  9c:	80 81       	ld	r24, Z
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  a2:	80 81       	ld	r24, Z
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	80 83       	st	Z, r24
	// Configura el ADC para operar en modo de 8 bits
	ADMUX |= (1 << ADLAR);
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	80 83       	st	Z, r24
	ADCSRA = 0;
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
	// Habilita el ADC y configura la prescaler a 128 (Frecuencia de muestreo = F_CPU / 128)
	ADCSRA |= (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  b4:	80 81       	ld	r24, Z
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // habilitar interrupción
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <setup>:
	
}
void setup(){
	cli();
  c2:	f8 94       	cli
	DDRB |= (1<<DDB1);	//salida
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 0;
  ca:	a0 e8       	ldi	r26, 0x80	; 128
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	1c 92       	st	X, r1
	TCCR1B = 0;
  d0:	e1 e8       	ldi	r30, 0x81	; 129
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
	
	TCCR1A |= (1<<COM1A1)| (1<<WGM10);				//OC1A modo fast no invertido
  d6:	8c 91       	ld	r24, X
  d8:	81 68       	ori	r24, 0x81	; 129
  da:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12);
  dc:	80 81       	ld	r24, Z
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<CS12)|(1<<CS10);		//1024 de preescaler
  e2:	80 81       	ld	r24, Z
  e4:	85 60       	ori	r24, 0x05	; 5
  e6:	80 83       	st	Z, r24
	//inicializacion de timer y adc
	initADC();
  e8:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	sei();
  ec:	78 94       	sei
  ee:	08 95       	ret

000000f0 <main>:
void initADC(void);
void setup(void);
int main(void)
{
	
	setup();
  f0:	0e 94 61 00 	call	0xc2	; 0xc2 <setup>
	sei();
  f4:	78 94       	sei
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x6>

000000f8 <__vector_21>:
/*ISR (ADC_vect){
	
	adc_value = ADCH;					//actualizar valor
	ADCSRA |= (1<<ADIF);			//apagar bandera 
}*/
ISR(ADC_vect) {
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	adc_value = ADCH; // Actualizar valor del ADC
 11a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR1A = (adc_value * 360) / 255; // Mapear el valor del ADC al rango de 0 a 180 grados
 122:	48 e6       	ldi	r20, 0x68	; 104
 124:	51 e0       	ldi	r21, 0x01	; 1
 126:	94 9f       	mul	r25, r20
 128:	90 01       	movw	r18, r0
 12a:	95 9f       	mul	r25, r21
 12c:	30 0d       	add	r19, r0
 12e:	11 24       	eor	r1, r1
 130:	c9 01       	movw	r24, r18
 132:	6f ef       	ldi	r22, 0xFF	; 255
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 b7 00 	call	0x16e	; 0x16e <__divmodhi4>
 13a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	ADCSRA |= (1<<ADIF);			//apagar bandera 
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	80 83       	st	Z, r24
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__divmodhi4>:
 16e:	97 fb       	bst	r25, 7
 170:	07 2e       	mov	r0, r23
 172:	16 f4       	brtc	.+4      	; 0x178 <__divmodhi4+0xa>
 174:	00 94       	com	r0
 176:	07 d0       	rcall	.+14     	; 0x186 <__divmodhi4_neg1>
 178:	77 fd       	sbrc	r23, 7
 17a:	09 d0       	rcall	.+18     	; 0x18e <__divmodhi4_neg2>
 17c:	0e 94 cb 00 	call	0x196	; 0x196 <__udivmodhi4>
 180:	07 fc       	sbrc	r0, 7
 182:	05 d0       	rcall	.+10     	; 0x18e <__divmodhi4_neg2>
 184:	3e f4       	brtc	.+14     	; 0x194 <__divmodhi4_exit>

00000186 <__divmodhi4_neg1>:
 186:	90 95       	com	r25
 188:	81 95       	neg	r24
 18a:	9f 4f       	sbci	r25, 0xFF	; 255
 18c:	08 95       	ret

0000018e <__divmodhi4_neg2>:
 18e:	70 95       	com	r23
 190:	61 95       	neg	r22
 192:	7f 4f       	sbci	r23, 0xFF	; 255

00000194 <__divmodhi4_exit>:
 194:	08 95       	ret

00000196 <__udivmodhi4>:
 196:	aa 1b       	sub	r26, r26
 198:	bb 1b       	sub	r27, r27
 19a:	51 e1       	ldi	r21, 0x11	; 17
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <__udivmodhi4_ep>

0000019e <__udivmodhi4_loop>:
 19e:	aa 1f       	adc	r26, r26
 1a0:	bb 1f       	adc	r27, r27
 1a2:	a6 17       	cp	r26, r22
 1a4:	b7 07       	cpc	r27, r23
 1a6:	10 f0       	brcs	.+4      	; 0x1ac <__udivmodhi4_ep>
 1a8:	a6 1b       	sub	r26, r22
 1aa:	b7 0b       	sbc	r27, r23

000001ac <__udivmodhi4_ep>:
 1ac:	88 1f       	adc	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	5a 95       	dec	r21
 1b2:	a9 f7       	brne	.-22     	; 0x19e <__udivmodhi4_loop>
 1b4:	80 95       	com	r24
 1b6:	90 95       	com	r25
 1b8:	bc 01       	movw	r22, r24
 1ba:	cd 01       	movw	r24, r26
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
